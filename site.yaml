- name: Local init
  hosts: localhost
  gather_facts: no
  tasks:
    - name: Create file
      file:
        path: "{{ playbook_dir }}/.bootstraped"
        state: touch

- name: Setup MariaDB as standalone mode
  hosts: commondb
  gather_facts: no
  tasks:
    - name: Create temp repos
      copy:
        src: rpm
        dest: /root

    - name: Create repofile
      copy:
        dest: /etc/yum.repos.d/commondb.repo
        content: |
          [commondb]
          name=commondb
          baseurl=file:///root/rpm
          enabled=1
          gpgcheck=0

#    - name: Remove old mariadb
#      yum:
#        name: [mariadb, mariadb-config, mariadb-common, mariadb-errmsg, mariadb-libs]
#        state: absent

    - name: Install MaraiDB
      yum:
        name: [MariaDB, expect]
        enablerepo: commondb

    - name: Config MariaDB
      template:
        src: templates/my.j2.cnf
        dest: /etc/my.cnf
        owner: mysql
        group: mysql
      when: not lookup('file', '.bootstraped') | bool
      notify:
        - Wait MariaDB

    - name: Create mariadb log path
      file:
        state: directory
        path: /var/log/mariadb
        owner: mysql
        group: mysql

    - name: Start mariadb
      systemd:
        name: mariadb
        state: started

  handlers:
    - import_tasks: handlers.yaml

- name: Init config standalone MariaDB
  hosts: commondb
  gather_facts: no
  handlers:
    - import_tasks: handlers.yaml
  tasks:
    - name: Clean MariaDB root unsecure permission
      shell: |
        mysqladmin -u root password "{{ mariadb_root_password  }}"
        mysql -u root -p"{{ mariadb_root_password  }}" -e "DELETE FROM mysql.user WHERE User='root' AND Host NOT IN ('localhost', '127.0.0.1', '::1')"
        mysql -u root -p"{{ mariadb_root_password  }}" -e "DELETE FROM mysql.user WHERE User=''"
        mysql -u root -p"{{ mariadb_root_password  }}" -e "DELETE FROM mysql.db WHERE Db='test' OR Db='test\_%'"
        mysql -u root -p"{{ mariadb_root_password  }}" -e "FLUSH PRIVILEGES"
      notify:
        - Test DB

    - name: Add .my.cnf for local root login
      copy:
        dest: /root/.my.cnf
        content: |
          [client]
          user=root
          password={{ mariadb_root_password }}
          [mysql]
          user=root
          password={{ mariadb_root_password }}

    - name: Add root grant for other nodes can access.
      shell: |
        {% for host in groups['commondb'] %}
        mysql -e "GRANT ALL ON *.* TO 'root'@'{{ hostvars[host]['mysql_address']}}' IDENTIFIED BY '{{ mariadb_root_password }}';"
        {% endfor %}
        mysql -e "FLUSH PRIVILEGES;"

- name: Config first node as Master MariaDB
  hosts: "{{ groups['commondb'][0] }}"
  gather_facts: no
  tasks:
    - block:
        - name : Stop first mariaDB for new cluster
          systemd:
            name: mariadb
            state: stopped
          when:
            - groups['commondb'] | length > 1

        - name: Config first MariaDB
          vars:
            set_cluster: true
            action: "bootstrap"
          template:
            src: templates/my.j2.cnf
            dest: /etc/my.cnf
          notify:
            - Wsrep new cluster
          when:
            - groups['commondb'] | length > 1
      when: not lookup('file', '.bootstraped') | bool

  handlers:
    - name: Wsrep new cluster
      shell: |
        /etc/init.d/mysql start --wsrep-new-cluster
        service mysql start bootstrap

    - name: Record cluster already bootstrap
      copy:
        content: "true"
        path: .bootstraped
      delegate_to: localhost

- name: Config other MariaDB nodes
  hosts: "{{ groups['commondb'][1:] }}"
  gather_facts: no
  handlers:
    - import_tasks: handlers.yaml
  tasks:
    - name: Config other MariaDB
      vars:
        action: slave
        set_cluster: true
      template:
        src: templates/my.j2.cnf
        dest: /etc/my.cnf
        owner: mysql
        group: mysql
      notify:
        - Restart MariaDB
        - Wait MariaDB

- name: Reconfig first MariaDB exit bootstrap mode
  hosts: "{{ groups['commondb'][0] }}"
  gather_facts: no
  handlers:
    - import_tasks: handlers.yaml
  tasks:
    - name: Copy mysql config
      vars:
        set_cluster: true
        action: rejoin
      template:
        src: templates/my.j2.cnf
        dest: /etc/my.cnf
        owner: mysql
        group: mysql
      notify:
        - Restart MariaDB
        - Wait MariaDB

- name: Setup haproxy and keepalived
  hosts: commondb
  gather_facts: no
  handlers:
    - import_tasks: handlers.yaml
  tasks:
    - block:
        - name: Install HA componment
          yum:
            name: [keepalived, haproxy, socat]
            enablerepo: commondb

        - name: Setting sysctl values
          sysctl: name={{ item.name }} value={{ item.value }} sysctl_set=yes
          become: true
          with_items:
            - { name: "net.ipv4.ip_nonlocal_bind", value: 1}
            - { name: "net.unix.max_dgram_qlen", value: 128}

        - name: Copy check script
          copy:
            src: templates/chk_haproxy.sh
            dest: /etc/keepalived/chk_haproxy.sh
            mode: 755

        - name: Config keepalived
          template:
            src: templates/keepalived.j2.conf
            dest: /etc/keepalived/keepalived.conf
          notify: Restart keepalived

        - name: Config Haproxy
          template:
            src: templates/haproxy.j2.cfg
            dest: /etc/haproxy/haproxy.cfg
          notify: Restart haproxy
      when: groups['commondb'] | length > 1
